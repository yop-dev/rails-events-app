<div class="admin-registrations">
  <!-- Navigation Header -->
  <nav class="admin-nav">
    <div class="nav-brand">
      <span class="brand-icon">üë•</span>
      <span class="brand-text">Registration Management</span>
    </div>
    <div class="nav-actions">
      <%= link_to "Dashboard", admin_root_path, class: "nav-link" %>
      <%= link_to "Events", admin_events_path, class: "nav-link" %>
      <%= link_to "Logout", destroy_admin_user_session_path, 
                  data: { turbo_method: :delete }, 
                  class: "btn btn-danger btn-sm" %>
    </div>
  </nav>

  <div class="management-container">
    <!-- Header Section -->
    <div class="header-section glass">
      <div class="header-content">
        <h1 class="page-title">
          <span class="title-gradient">Registration Management</span>
        </h1>
        <p class="page-subtitle">
          Manage all event registrations and attendee information
        </p>
      </div>
      
      <!-- Stats Overview -->
      <div class="stats-overview">
        <div class="stat-item">
          <span class="stat-number"><%= @total_registrations %></span>
          <span class="stat-label">Total Registrations</span>
        </div>
        <div class="stat-item">
          <span class="stat-number"><%= @unique_attendees %></span>
          <span class="stat-label">Unique Attendees</span>
        </div>
        <div class="stat-item">
          <span class="stat-number"><%= @events_with_registrations %></span>
          <span class="stat-label">Events with Registrations</span>
        </div>
      </div>
    </div>

    <!-- Search and Filters -->
    <div class="controls-section glass">
      <%= form_with url: admin_registrations_path, method: :get, local: true, class: "search-form" do |form| %>
        <div class="search-controls">
          <div class="search-input-group">
            <%= form.text_field :search, 
                placeholder: "Search by attendee name, email, or event name...", 
                value: params[:search],
                class: "search-input" %>
            <button type="submit" class="search-btn">
              <span>üîç</span>
            </button>
          </div>
          
          <div class="filter-group">
            <%= form.select :event_id, 
                options_from_collection_for_select(@all_events, :id, :name, params[:event_id]),
                { prompt: "All Events" },
                { class: "filter-select" } %>
          </div>
          
          <% if params[:search].present? || params[:event_id].present? %>
            <%= link_to "Clear Filters", admin_registrations_path, class: "btn btn-secondary" %>
          <% end %>
        </div>
      <% end %>
      
      <!-- Actions -->
      <div class="action-controls">
        <!-- CSV Export Options -->
        <div class="export-controls">
          <!-- Export All (current behavior) -->
          <%= link_to "Export All CSV", admin_registrations_path(format: :csv, search: params[:search], event_id: params[:event_id]), 
              class: "btn btn-success", 
              title: "Export all current results to CSV" %>
          
          <!-- Export Selected -->
          <%= form_with url: export_selected_csv_admin_registrations_path, method: :post, local: true, id: "export-form", class: "export-form", data: { turbo: false } do |form| %>
            <button type="submit" class="btn btn-success" id="export-selected-btn" disabled title="Export selected registrations to CSV">
              Export Selected CSV
            </button>
          <% end %>
        </div>
        
        <!-- Bulk Actions Form -->
        <%= form_with url: bulk_destroy_admin_registrations_path, method: :delete, local: true, id: "bulk-form", class: "bulk-form" do |form| %>
          <button type="submit" class="btn btn-danger" id="bulk-delete-btn" disabled>
            Delete Selected
          </button>
        <% end %>
      </div>
    </div>

    <!-- Registrations Table -->
    <div class="registrations-table-section glass">
      <div class="table-header">
        <h2>Registrations List</h2>
        <div class="table-info">
          Showing <%= @registrations.count %> registrations
        </div>
      </div>
      
      <% if @registrations.any? %>
        <div class="registrations-table-container">
            <table class="registrations-table">
            <thead>
              <tr>
                <th class="select-col">
                  <input type="checkbox" id="select-all" class="select-checkbox">
                </th>
                <th>Attendee Information</th>
                <th>Event Details</th>
                <th>Event Organizer</th>
                <th>Registration Date</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% @registrations.each do |registration| %>
                <tr class="registration-row" data-registration-id="<%= registration.id %>">
                  <td class="select-col">
                    <input type="checkbox" name="registration_ids[]" value="<%= registration.id %>" class="registration-checkbox">
                  </td>
                  <td class="attendee-details">
                    <div class="attendee-name"><%= registration.attendee_name %></div>
                    <div class="attendee-email">‚úâÔ∏è <%= registration.attendee_email %></div>
                  </td>
                  <td class="event-details">
                    <div class="event-name">
                      <%= link_to registration.event.name, event_path(registration.event), 
                          class: "event-link" %>
                    </div>
                    <div class="event-date-location">
                      üìÖ <%= registration.event.date.strftime("%b %d, %Y at %I:%M %p") %>
                      <br>üìç <%= registration.event.location %>
                    </div>
                  </td>
                  <td class="event-organizer">
                    <div class="organizer-info">
                      <span class="organizer-email"><%= registration.event.user.email %></span>
                      <span class="organizer-role">
                        <%= registration.event.user.admin? ? "Admin" : "User" %>
                      </span>
                    </div>
                  </td>
                  <td class="registration-date">
                    <div class="date-info">
                      <span class="date-primary"><%= registration.created_at.strftime("%b %d, %Y") %></span>
                      <span class="date-time"><%= registration.created_at.strftime("%I:%M %p") %></span>
                    </div>
                  </td>
                  <td class="registration-actions">
                    <div class="action-buttons">
                      <%= link_to "View Event", event_path(registration.event), 
                          class: "btn btn-sm btn-primary" %>
                      <%= link_to "Delete", admin_registration_path(registration), 
                          data: { 
                            turbo_method: :delete,
                            turbo_confirm: "Are you sure you want to delete this registration?" 
                          },
                          class: "btn btn-sm btn-danger" %>
                    </div>
                  </td>
                </tr>
              <% end %>
            </tbody>
            </table>
        </div>
      <% else %>
        <div class="empty-state">
          <div class="empty-icon">üë•</div>
          <h3>No registrations found</h3>
          <p>
            <% if params[:search].present? || params[:event_id].present? %>
              No registrations match your search criteria.
            <% else %>
              There are no registrations in the system yet.
            <% end %>
          </p>
          <% if params[:search].present? || params[:event_id].present? %>
            <%= link_to "Clear Filters", admin_registrations_path, class: "btn btn-primary" %>
          <% end %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<style>
  :root {
    --text-primary: #ffffff;
    --text-secondary: #b8b8b8;
    --warning: #ffc107;
    --primary: #007bff;
    --info: #17a2b8;
    --success: #28a745;
    --danger: #dc3545;
  }
  
  .glass {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }
  
  .admin-registrations {
    min-height: 100vh;
    background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 50%, #0f0f0f 100%);
  }
  
  .admin-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 40px;
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .nav-brand {
    display: flex;
    align-items: center;
    gap: 12px;
  }
  
  .brand-icon {
    font-size: 24px;
    filter: drop-shadow(0 0 10px rgba(255, 193, 7, 0.5));
  }
  
  .brand-text {
    font-size: 20px;
    font-weight: 600;
    background: linear-gradient(135deg, #fff 0%, #ccc 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .nav-actions {
    display: flex;
    align-items: center;
    gap: 15px;
  }
  
  .nav-link {
    color: var(--text-secondary);
    text-decoration: none;
    transition: color 0.3s ease;
  }
  
  .nav-link:hover {
    color: var(--text-primary);
  }
  
  .management-container {
    padding: 40px;
    max-width: 1400px;
    margin: 0 auto;
  }
  
  .header-section {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 40px;
    margin-bottom: 30px;
  }
  
  .header-content h1 {
    font-size: 36px;
    font-weight: 700;
    margin-bottom: 8px;
  }
  
  .title-gradient {
    background: linear-gradient(135deg, #fff 0%, #ffc107 50%, #fff 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .page-subtitle {
    color: var(--text-secondary);
    font-size: 16px;
  }
  
  .stats-overview {
    display: flex;
    gap: 30px;
  }
  
  .stat-item {
    text-align: center;
  }
  
  .stat-number {
    display: block;
    font-size: 28px;
    font-weight: 700;
    color: var(--text-primary);
  }
  
  .stat-label {
    display: block;
    font-size: 12px;
    color: var(--text-secondary);
    margin-top: 4px;
  }
  
  .controls-section {
    padding: 24px;
    margin-bottom: 30px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 20px;
  }
  
  .search-controls {
    display: flex;
    align-items: center;
    gap: 15px;
    flex: 1;
  }
  
  .search-input-group {
    position: relative;
    flex: 1;
    max-width: 400px;
  }
  
  .search-input {
    width: 100%;
    padding: 12px 45px 12px 15px;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 14px;
  }
  
  .search-input::placeholder {
    color: var(--text-secondary);
  }
  
  .search-btn {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 8px;
    border-radius: 4px;
    transition: all 0.3s ease;
  }
  
  .search-btn:hover {
    background: rgba(255, 255, 255, 0.1);
    color: var(--text-primary);
  }
  
  .filter-select {
    padding: 10px 15px;
    background: rgba(255, 255, 255, 0.95);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 8px;
    color: #333333;
    font-size: 14px;
    min-width: 160px;
  }
  
  .filter-select option {
    background: white;
    color: #333333;
    padding: 8px 12px;
  }
  
  .filter-select:focus {
    outline: none;
    border-color: var(--warning);
    box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.2);
  }
  
  .action-controls {
    display: flex;
    gap: 15px;
    align-items: center;
    flex-wrap: wrap;
  }
  
  .export-controls {
    display: flex;
    gap: 10px;
    align-items: center;
  }
  
  .export-form {
    margin: 0;
  }
  
  .registrations-table-section {
    padding: 0;
    overflow: hidden;
  }
  
  .table-header {
    padding: 24px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .table-header h2 {
    font-size: 20px;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }
  
  .table-info {
    color: var(--text-secondary);
    font-size: 14px;
  }
  
  .registrations-table-container {
    overflow-x: auto;
  }
  
  .registrations-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .registrations-table th,
  .registrations-table td {
    padding: 16px;
    text-align: left;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .registrations-table th {
    background: rgba(255, 255, 255, 0.02);
    color: var(--text-secondary);
    font-weight: 500;
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .registration-row {
    transition: all 0.3s ease;
  }
  
  .registration-row:hover {
    background: rgba(255, 255, 255, 0.02);
  }
  
  .select-col {
    width: 40px;
    text-align: center;
  }
  
  .select-checkbox,
  .registration-checkbox {
    appearance: none;
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 3px;
    position: relative;
    cursor: pointer;
  }
  
  .select-checkbox:checked,
  .registration-checkbox:checked {
    background: var(--warning);
    border-color: var(--warning);
  }
  
  .select-checkbox:checked::after,
  .registration-checkbox:checked::after {
    content: '‚úì';
    position: absolute;
    top: -2px;
    left: 1px;
    color: #000;
    font-size: 12px;
    font-weight: bold;
  }
  
  .attendee-details {
    min-width: 200px;
  }
  
  .attendee-name {
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 4px;
  }
  
  .attendee-email {
    color: var(--text-secondary);
    font-size: 14px;
  }
  
  .event-details {
    min-width: 250px;
  }
  
  .event-name {
    margin-bottom: 8px;
  }
  
  .event-link {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
  }
  
  .event-link:hover {
    color: var(--info);
    text-decoration: underline;
  }
  
  .event-date-location {
    color: var(--text-secondary);
    font-size: 13px;
    line-height: 1.4;
  }
  
  .organizer-info {
    display: flex;
    flex-direction: column;
    gap: 4px;
  }
  
  .organizer-email {
    color: var(--text-primary);
    font-size: 14px;
  }
  
  .organizer-role {
    font-size: 12px;
    padding: 2px 8px;
    border-radius: 12px;
    align-self: flex-start;
  }
  
  .date-info {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }
  
  .date-primary {
    color: var(--text-primary);
    font-weight: 500;
  }
  
  .date-time {
    color: var(--text-secondary);
    font-size: 13px;
  }
  
  .action-buttons {
    display: flex;
    gap: 8px;
  }
  
  .btn {
    padding: 8px 16px;
    border: none;
    border-radius: 6px;
    font-size: 12px;
    font-weight: 500;
    text-decoration: none;
    cursor: pointer;
    transition: all 0.3s ease;
    display: inline-block;
    text-align: center;
  }
  
  .btn-sm {
    padding: 6px 12px;
    font-size: 11px;
  }
  
  .btn-primary {
    background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
    color: white;
  }
  
  .btn-primary:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
  }
  
  .btn-danger {
    background: linear-gradient(135deg, #dc3545 0%, #a71e2a 100%);
    color: white;
  }
  
  .btn-danger:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(220, 53, 69, 0.3);
  }
  
  .btn-success {
    background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
    color: white;
  }
  
  .btn-success:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
  }
  
  .btn-secondary {
    background: rgba(255, 255, 255, 0.1);
    color: var(--text-secondary);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.15);
    color: var(--text-primary);
  }
  
  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .btn:disabled:hover {
    transform: none;
    box-shadow: none;
  }
  
  .empty-state {
    text-align: center;
    padding: 60px 20px;
  }
  
  .empty-icon {
    font-size: 64px;
    margin-bottom: 20px;
    opacity: 0.5;
  }
  
  .empty-state h3 {
    color: var(--text-primary);
    margin-bottom: 10px;
  }
  
  .empty-state p {
    color: var(--text-secondary);
    margin-bottom: 20px;
  }
  
  @media (max-width: 768px) {
    .admin-nav {
      padding: 15px 20px;
    }
    
    .management-container {
      padding: 20px;
    }
    
    .header-section {
      flex-direction: column;
      text-align: center;
      gap: 20px;
    }
    
    .controls-section {
      flex-direction: column;
      align-items: stretch;
      gap: 15px;
    }
    
    .search-controls {
      flex-direction: column;
    }
    
    .search-input-group {
      max-width: none;
    }
    
    .action-controls {
      justify-content: center;
    }
    
    .stats-overview {
      justify-content: center;
    }
    
    .registrations-table-container {
      font-size: 14px;
    }
    
    .registrations-table th,
    .registrations-table td {
      padding: 12px 8px;
    }
  }
</style>

<script>
document.addEventListener('turbo:load', function() {
  // Only run on admin registrations page
  if (!document.querySelector('.admin-registrations') || !document.querySelector('.registration-checkbox')) return;
  
  console.log('Admin registrations page loaded');
  
  // Get elements
  const selectAllCheckbox = document.getElementById('select-all');
  const registrationCheckboxes = document.querySelectorAll('.registration-checkbox');
  const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
  const bulkForm = document.getElementById('bulk-form');
  const exportSelectedBtn = document.getElementById('export-selected-btn');
  const exportForm = document.getElementById('export-form');
  
  console.log('Found elements:', {
    selectAll: !!selectAllCheckbox,
    checkboxCount: registrationCheckboxes.length,
    bulkBtn: !!bulkDeleteBtn,
    bulkForm: !!bulkForm,
    exportBtn: !!exportSelectedBtn,
    exportForm: !!exportForm
  });

  // Select all functionality
  if (selectAllCheckbox && registrationCheckboxes.length > 0) {
    selectAllCheckbox.addEventListener('change', function() {
      console.log('Select all clicked:', this.checked);
      registrationCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateBulkDeleteButton();
    });
  }

  // Individual checkbox listeners
  registrationCheckboxes.forEach((checkbox, index) => {
    checkbox.addEventListener('change', function() {
      console.log(`Checkbox ${index} changed:`, this.checked);
      updateSelectAllState();
      updateBulkDeleteButton();
    });
  });

  function updateSelectAllState() {
    if (!selectAllCheckbox || registrationCheckboxes.length === 0) return;
    
    const checkedCount = document.querySelectorAll('.registration-checkbox:checked').length;
    const totalCount = registrationCheckboxes.length;
    
    console.log('Checked count:', checkedCount, 'Total:', totalCount);
    
    selectAllCheckbox.checked = checkedCount === totalCount && totalCount > 0;
    selectAllCheckbox.indeterminate = checkedCount > 0 && checkedCount < totalCount;
  }

  function updateBulkDeleteButton() {
    const checkedCheckboxes = document.querySelectorAll('.registration-checkbox:checked');
    const hasSelection = checkedCheckboxes.length > 0;
    
    console.log('Updating buttons, selected:', checkedCheckboxes.length);
    
    // Update bulk delete button
    if (bulkDeleteBtn) {
      bulkDeleteBtn.disabled = !hasSelection;
    }
    
    // Update export selected button
    if (exportSelectedBtn) {
      exportSelectedBtn.disabled = !hasSelection;
      exportSelectedBtn.textContent = hasSelection 
        ? `Export Selected CSV (${checkedCheckboxes.length})` 
        : 'Export Selected CSV';
    }
    
    // Update bulk delete form with selected IDs
    if (bulkForm) {
      // Remove existing hidden inputs
      bulkForm.querySelectorAll('input[name="registration_ids[]"]').forEach(input => input.remove());
      
      // Add new hidden inputs for selected registrations
      checkedCheckboxes.forEach(checkbox => {
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'registration_ids[]';
        hiddenInput.value = checkbox.value;
        bulkForm.appendChild(hiddenInput);
      });
    }
    
    // Update export form with selected IDs
    if (exportForm) {
      // Remove existing hidden inputs
      exportForm.querySelectorAll('input[name="registration_ids[]"]').forEach(input => input.remove());
      
      // Add new hidden inputs for selected registrations
      checkedCheckboxes.forEach(checkbox => {
        const hiddenInput = document.createElement('input');
        hiddenInput.type = 'hidden';
        hiddenInput.name = 'registration_ids[]';
        hiddenInput.value = checkbox.value;
        exportForm.appendChild(hiddenInput);
      });
    }
  }

  // Handle bulk delete form submission with confirmation
  if (bulkForm) {
    bulkForm.addEventListener('submit', function(e) {
      e.preventDefault(); // Always prevent default first
      
      const checkedCheckboxes = document.querySelectorAll('.registration-checkbox:checked');
      const count = checkedCheckboxes.length;
      
      console.log('Form submitted with', count, 'selections');
      
      if (count === 0) {
        alert('Please select registrations to delete.');
        return;
      }
      
      const message = count === 1 
        ? 'Are you sure you want to delete this registration? This action cannot be undone.' 
        : `Are you sure you want to delete ${count} registrations? This action cannot be undone.`;
      
      if (confirm(message)) {
        // Only submit if user confirms
        bulkForm.submit();
      }
    });
  }

  // Handle export selected button click validation
  if (exportSelectedBtn) {
    exportSelectedBtn.addEventListener('click', function(e) {
      const checkedCheckboxes = document.querySelectorAll('.registration-checkbox:checked');
      const count = checkedCheckboxes.length;
      
      console.log('Export button clicked:', {
        count: count,
        hiddenInputs: exportForm?.querySelectorAll('input[name="registration_ids[]"]').length || 0
      });
      
      if (count === 0) {
        e.preventDefault();
        alert('Please select registrations to export.');
        return false;
      }
      
      console.log(`Exporting ${count} registrations to CSV`);
      console.log('Selected IDs:', Array.from(checkedCheckboxes).map(cb => cb.value));
      // Allow form submission to proceed
      return true;
    });
  }

  // Initialize states
  updateSelectAllState();
  updateBulkDeleteButton();
  
  // Auto-submit form when event filter dropdown changes
  const eventFilterDropdown = document.querySelector('.filter-select');
  if (eventFilterDropdown) {
    eventFilterDropdown.addEventListener('change', function() {
      console.log('Event filter changed to:', this.value);
      // Find the parent form and submit it
      const form = this.closest('form');
      if (form) {
        form.submit();
      }
    });
  }
});
</script>
